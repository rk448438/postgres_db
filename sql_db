-- PostgreSQL Database Setup Script for CRM Billing Software

-- Create Database
CREATE DATABASE billing_db;

-- Connect to the newly created database
\c billing_db

-- Create Products Table
CREATE TABLE IF NOT EXISTS products (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL UNIQUE,
    price DECIMAL(10, 2) NOT NULL,
    stock_quantity DECIMAL(10, 2) DEFAULT 0,
    unit VARCHAR(50) DEFAULT 'Nos',
    category VARCHAR(100),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create Customers Table
CREATE TABLE IF NOT EXISTS customers (
    id SERIAL PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    phone_number VARCHAR(15) UNIQUE,
    email VARCHAR(255),
    total_purchases DECIMAL(10, 2) DEFAULT 0,
    last_purchase_date TIMESTAMP,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create Bills Table
CREATE TABLE IF NOT EXISTS bills (
    id SERIAL PRIMARY KEY,
    bill_number VARCHAR(50) UNIQUE NOT NULL,
    customer_id INTEGER REFERENCES customers(id),
    total_amount DECIMAL(10, 2) NOT NULL,
    discount DECIMAL(5, 2) DEFAULT 0,
    tax DECIMAL(5, 2) DEFAULT 0,
    payment_method VARCHAR(50),
    bill_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Create Bill Items Table
CREATE TABLE IF NOT EXISTS bill_items (
    id SERIAL PRIMARY KEY,
    bill_id INTEGER REFERENCES bills(id),
    product_id INTEGER REFERENCES products(id),
    quantity DECIMAL(10, 2) NOT NULL,
    unit VARCHAR(50),
    price_per_unit DECIMAL(10, 2) NOT NULL,
    total_price DECIMAL(10, 2) NOT NULL
);

-- Add Indexes for Performance
CREATE INDEX idx_bills_customer_id ON bills(customer_id);
CREATE INDEX idx_bill_items_bill_id ON bill_items(bill_id);
CREATE INDEX idx_bill_items_product_id ON bill_items(product_id);


-- Add Comprehensive Indexes for Performance
-- Indexes for bills table
CREATE INDEX idx_bills_customer_id ON bills(customer_id);
CREATE INDEX idx_bills_bill_number ON bills(bill_number);
CREATE INDEX idx_bills_bill_date ON bills(bill_date);

-- Indexes for bill_items table
CREATE INDEX idx_bill_items_bill_id ON bill_items(bill_id);
CREATE INDEX idx_bill_items_product_id ON bill_items(product_id);
CREATE INDEX idx_bill_items_bill_number ON bill_items(bill_number);
CREATE INDEX idx_bill_items_product_name ON bill_items(product_name);
CREATE INDEX idx_bill_items_product_category ON bill_items(product_category);

-- Composite indexes for more complex queries
CREATE INDEX idx_bill_items_bill_product ON bill_items(bill_id, product_id);
CREATE INDEX idx_bill_items_product_details ON bill_items(product_category, product_name);

-- Create a function to update customer total purchases
CREATE OR REPLACE FUNCTION update_customer_total_purchases()
RETURNS TRIGGER AS $$
BEGIN
    UPDATE customers 
    SET 
        total_purchases = total_purchases + NEW.total_amount,
        last_purchase_date = NEW.bill_date
    WHERE id = NEW.customer_id;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create a trigger to automatically update customer total purchases
CREATE TRIGGER update_customer_purchases_trigger
AFTER INSERT ON bills
FOR EACH ROW
EXECUTE FUNCTION update_customer_total_purchases();


-- Modify the bill_summary function to update bill_items with additional details
CREATE OR REPLACE FUNCTION update_bill_items_details()
RETURNS TRIGGER AS $$
DECLARE
    v_bill_number VARCHAR(50);
BEGIN
    -- Get the bill number for the current bill
    SELECT bill_number INTO v_bill_number
    FROM bills
    WHERE id = NEW.bill_id;

    -- Update bill_items with additional product details
    UPDATE bill_items 
    SET 
        bill_number = v_bill_number,
        product_name = (
            SELECT name 
            FROM products 
            WHERE id = NEW.product_id
        ),
        product_category = (
            SELECT category 
            FROM products 
            WHERE id = NEW.product_id
        )
    WHERE id = NEW.id;

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create a trigger to automatically update bill_items with product details
CREATE TRIGGER update_bill_items_details_trigger
AFTER INSERT ON bill_items
FOR EACH ROW
EXECUTE FUNCTION update_bill_items_details();

-- Create a function to update customer total purchases and bill total items
CREATE OR REPLACE FUNCTION update_bill_summary()
RETURNS TRIGGER AS $$
BEGIN
    -- Update total items for the bill
    UPDATE bills 
    SET 
        total_items = (
            SELECT COALESCE(SUM(quantity), 0)
            FROM bill_items 
            WHERE bill_id = NEW.bill_id
        )
    WHERE id = NEW.bill_id;

    -- Update customer total purchases
    UPDATE customers 
    SET 
        total_purchases = total_purchases + (
            SELECT total_amount 
            FROM bills 
            WHERE id = NEW.bill_id
        ),
        last_purchase_date = (
            SELECT bill_date 
            FROM bills 
            WHERE id = NEW.bill_id
        )
    WHERE id = (
        SELECT customer_id 
        FROM bills 
        WHERE id = NEW.bill_id
    );

    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Create a trigger to automatically update bill total items and customer purchases
CREATE TRIGGER update_bill_summary_trigger
AFTER INSERT OR UPDATE ON bill_items
FOR EACH ROW
EXECUTE FUNCTION update_bill_summary();
